C        Generated by TAPENADE     (INRIA, Tropics team)
C  Tapenade 2.2.4 (r2308) - 03/04/2008 10:03
C  
C  Differentiation of warpblk in forward (tangent) mode:
C   variations  of output variables: xyz
C   with respect to input variables: xyz
      SUBROUTINE WARPBLK_D(ifaceptb, iedgeptb, ncall, ig, igo, il, jl, 
     +                     kl, xyz0, s0, dfacei, dfacej, dfacek, xyz, 
     +                     xyzd)
      USE DIFFSIZES
C  Hint: SIZE3OFdfacekdINwarpblk should be the value of jl
C  Hint: SIZE2OFdfacekdINwarpblk should be the value of il
C  Hint: SIZE3OFdfacejdINwarpblk should be the value of kl
C  Hint: SIZE2OFdfacejdINwarpblk should be the value of il
C  Hint: SIZE3OFdfaceidINwarpblk should be the value of kl
C  Hint: SIZE2OFdfaceidINwarpblk should be the value of jl
      IMPLICIT NONE
C
C
C     ******************************************************************
C     *   WARP-BLK completes the perturbation of one block of a multi- *
C     *   block grid structure given a base grid and all fixed and all *
C     *   explicitly-perturbed faces in-place for the desired block.   *
C     *                                                                *
C     *   Ancillary routines:   PARAM3DM, WARPQ3DM, DELQ3DM            *
C     *                                                                *
C     *   11/29/95  D.Saunders  Specialized adaptation of WARP3D and   *
C     *                         ancillary routines for FLO107-MB.      *
C     *   01/26/96  DAS/JJR     Edges affected implicitly by corner    *
C     *                         motion had been overlooked.            *
C     *   04/04/96     "        Algorithm is now 3-stage/1-pass, not   *
C     *                         2-stage/2-pass as it was originally.   *
C     *   05/24/96     "        Juan Alonso debugged it for us.        *
C     *   06/??/96    JJR       Implicit edge motion is specified at   *
C     *                         the higher level now via IEDGEPTB(*).  *
C     *   06/19/96    DAS       Handled degenerate edges in PARAM3DM.  *
C     *                                                                *
C     *   David Saunders/James Reuther, NASA Ames Research Center, CA. *
C     ******************************************************************
C
C Take out when all compilers have a switch
C
C     Arguments:
C
C I  Controls for faces 1 - 6:
C    0 means no perturbation;
C    1 means implicit perturbation;
C    2 means explicit perturbation
      INTEGER ifaceptb(6)
C I  Controls for edges 1 - 12:
C    0 means no perturbation;
C    1 means implicit perturbation;
C    2 means explicit perturbation
      INTEGER iedgeptb(12)
C I  First call if NCALL = -3
      INTEGER ncall
C I  Design point i.d.
      INTEGER ig, igo
C I  Block dimensions
      INTEGER il, jl, kl
      REAL*8 xyz0
C I  Base block including halo
      DIMENSION xyz0(3, 0:il+1, 0:jl+1, 0:kl+1)
      REAL*8 s0
CI/O Base normalized arc-lengths;
C    halo allows use of XYZ pointers
      DIMENSION s0(3, 0:il+1, 0:jl+1, 0:kl+1)
      REAL*8 dfacei
C S  For face perturbations; e.g.,
      DIMENSION dfacei(3, jl, kl, 2, 4)
      REAL*8 dfaceid(3, SIZE2OFdfaceidINwarpblk, SIZE3OFdfaceidINwarpblk
     +       , 2, 4)
      DIMENSION dfaceid(3, jl, kl, 2, 4)
      REAL*8 dfacej
C    DFACEI(1:3,JL,KL,1,M) =
      DIMENSION dfacej(3, il, kl, 2, 4)
      REAL*8 dfacejd(3, SIZE2OFdfacejdINwarpblk, SIZE3OFdfacejdINwarpblk
     +       , 2, 4)
      DIMENSION dfacejd(3, il, kl, 2, 4)
      REAL*8 dfacek
C    dX, dY, dZ on the I=1 face for
C    stage M, etc.; M = 1,2a 2b,3.
C    each can be (3,MDM,MDM,2,4) if
C    MDM=MAX(IL,JL,KL) (all blocks)
      DIMENSION dfacek(3, il, jl, 2, 4)
      REAL*8 dfacekd(3, SIZE2OFdfacekdINwarpblk, SIZE3OFdfacekdINwarpblk
     +       , 2, 4)
      DIMENSION dfacekd(3, il, jl, 2, 4)
      REAL*8 xyz
CI/O Perturbed block
      DIMENSION xyz(3, 0:il+1, 0:jl+1, 0:kl+1)
      REAL*8 xyzd
      DIMENSION xyzd(3, 0:il+1, 0:jl+1, 0:kl+1)
      REAL*8 zero
      REAL*8 eps
      REAL*8 one
      PARAMETER (eps=1.e-14, one=1.e+0, zero=0.e+0)
C presumably only if result is zero.
C
C     Local variables.
C
      INTEGER i, i1, i2, j, j1, j2, k, k1, k2, l, lc, le, m
      REAL*8 dx
      REAL*8 dxd
      REAL*8 dy
      REAL*8 dyd
      REAL*8 dz
      REAL*8 dzd
C     REAL      DEL1, DEL2, DELI, DELJ, DELK,
C    >          DELIJ, DELIK, DELJI, DELJK, DELKI, DELKJ,
C    >          WTI1, WTI2, WTJ1, WTJ2, WTK1, WTK2
C Corner perturbations
      DIMENSION dx(8), dy(8), dz(8)
      DIMENSION dxd(8), dyd(8), dzd(8)
      REAL*8 wti2
      REAL*8 wti1
      REAL*8 wtj2
      REAL*8 wtj1
      REAL*8 wtk2
      REAL*8 wtk1
      REAL*8 deli
      REAL*8 delid
      REAL*8 delj
      REAL*8 deljd
      REAL*8 delk
      REAL*8 delkd
      REAL*8 del1
      REAL*8 del1d
      REAL*8 delij
      REAL*8 delijd
      REAL*8 delik
      REAL*8 delikd
      REAL*8 delji
      REAL*8 deljid
      REAL*8 deljk
      REAL*8 deljkd
      REAL*8 delki
      REAL*8 delkid
      REAL*8 delkj
      REAL*8 delkjd
      REAL*8 del2
      REAL*8 del2d
      REAL*8 abs30
      REAL*8 abs18d
      REAL*8 abs26d
      REAL*8 x10d
      REAL*8 max10d
      REAL*8 abs34d
      REAL*8 abs42d
      REAL*8 abs50d
      REAL*8 x6d
      REAL*8 abs29d
      REAL*8 abs37d
      REAL*8 x12
      REAL*8 abs1d
      REAL*8 abs45d
      REAL*8 x11
      REAL*8 abs53d
      REAL*8 x10
      REAL*8 x9d
      REAL*8 max2d
      REAL*8 abs4d
      REAL*8 abs11d
      REAL*8 abs48d
      REAL*8 max5d
      REAL*8 x9
      REAL*8 abs29
      INTRINSIC MAX
      REAL*8 x8
      REAL*8 abs28
      REAL*8 abs27
      REAL*8 x7
      REAL*8 abs14d
      REAL*8 abs7d
      REAL*8 abs26
      REAL*8 x6
      REAL*8 abs22d
      REAL*8 abs25
      REAL*8 x5
      REAL*8 abs30d
      REAL*8 abs24
      REAL*8 x4
      REAL*8 max8d
      REAL*8 abs23
      REAL*8 x3
      INTRINSIC ABS
      REAL*8 abs22
      REAL*8 x2
      REAL*8 x2d
      REAL*8 abs21
      REAL*8 x1
      REAL*8 abs20
      REAL*8 abs17d
      REAL*8 abs25d
      REAL*8 abs33d
      REAL*8 abs54
      REAL*8 abs41d
      REAL*8 abs53
      REAL*8 abs52
      REAL*8 x5d
      REAL*8 abs51
      REAL*8 abs50
      REAL*8 abs28d
      REAL*8 x12d
      REAL*8 max12d
      REAL*8 abs36d
      REAL*8 abs44d
      REAL*8 abs52d
      REAL*8 x8d
      REAL*8 max1d
      REAL*8 abs39d
      REAL*8 abs3d
      REAL*8 abs10d
      REAL*8 abs47d
      REAL*8 max4d
      REAL*8 abs19
      REAL*8 abs18
      REAL*8 abs17
      REAL*8 abs13d
      REAL*8 abs6d
      REAL*8 abs16
      REAL*8 abs21d
      REAL*8 abs15
      REAL*8 abs14
      REAL*8 max7d
      REAL*8 abs13
      REAL*8 abs12
      REAL*8 abs49
      REAL*8 x1d
      REAL*8 abs11
      REAL*8 abs48
      REAL*8 abs10
      REAL*8 abs47
      REAL*8 abs16d
      REAL*8 abs9d
      REAL*8 abs46
      REAL*8 abs24d
      REAL*8 abs45
      REAL*8 abs32d
      REAL*8 abs44
      REAL*8 abs40d
      REAL*8 abs43
      REAL*8 abs42
      REAL*8 x4d
      REAL*8 abs41
      REAL*8 abs40
      REAL*8 abs19d
      REAL*8 abs27d
      REAL*8 x11d
      REAL*8 max11d
      REAL*8 abs35d
      REAL*8 abs9
      REAL*8 abs43d
      REAL*8 abs8
      REAL*8 abs51d
      REAL*8 abs7
      REAL*8 x7d
      REAL*8 abs6
      REAL*8 abs5
      REAL*8 abs4
      REAL*8 abs3
      REAL*8 abs38d
      REAL*8 abs2
      REAL*8 abs2d
      REAL*8 abs46d
      REAL*8 abs1
      REAL*8 abs54d
      REAL*8 max3d
      REAL*8 max9
      REAL*8 abs49d
      REAL*8 abs5d
      REAL*8 abs12d
      INTEGER ii5
      REAL*8 max8
      REAL*8 abs20d
      INTEGER ii4
      REAL*8 max7
      INTEGER ii3
      REAL*8 max6
      REAL*8 max6d
      INTEGER ii2
      REAL*8 max5
      INTEGER ii1
      REAL*8 max4
      REAL*8 abs39
      REAL*8 max3
      REAL*8 abs38
      REAL*8 max2
      REAL*8 abs37
      REAL*8 abs15d
      REAL*8 abs8d
      REAL*8 max1
      REAL*8 max12
      REAL*8 abs36
      REAL*8 abs23d
      REAL*8 max11
      REAL*8 abs35
      REAL*8 abs31d
      REAL*8 max10
      REAL*8 abs34
      REAL*8 max9d
      REAL*8 abs33
      REAL*8 abs32
      REAL*8 x3d
      REAL*8 abs31
C
C     Execution.
C
C     Parameterize the block volume on the first call:
C
      IF (ncall .LE. -3 .AND. ig .NE. igo) CALL PARAM3DM(il, jl, kl, 
     +                                                   xyz0, s0)
C         write(*,*) 'parameterizing'
C
C     Calculate corner point motion:
C
      lc = 1
      DO ii1=1,8
        dxd(ii1) = 0.0_8
      ENDDO
      DO ii1=1,8
        dyd(ii1) = 0.0_8
      ENDDO
      DO ii1=1,8
        dzd(ii1) = 0.0_8
      ENDDO
      DO k=1,kl,kl-1
        DO j=1,jl,jl-1
          DO i=1,il,il-1
            dxd(lc) = xyzd(1, i, j, k)
            dx(lc) = xyz(1, i, j, k) - xyz0(1, i, j, k)
            dyd(lc) = xyzd(2, i, j, k)
            dy(lc) = xyz(2, i, j, k) - xyz0(2, i, j, k)
            dzd(lc) = xyzd(3, i, j, k)
            dz(lc) = xyz(3, i, j, k) - xyz0(3, i, j, k)
            lc = lc + 1
          ENDDO
        ENDDO
      ENDDO
C     Perturb implicit block edges.
C
C     Edges in the I direction:
C
      le = 1
      lc = 1
C
      DO k=1,kl,kl-1
        DO j=1,jl,jl-1
          IF (iedgeptb(le) .EQ. 1) THEN
            DO i=2,il-1
              wti2 = s0(1, i, j, k)
              wti1 = one - wti2
              xyzd(1, i, j, k) = wti1*dxd(lc) + wti2*dxd(lc+1)
              xyz(1, i, j, k) = wti1*dx(lc) + wti2*dx(lc+1) + xyz0(1, i
     +          , j, k)
              xyzd(2, i, j, k) = wti1*dyd(lc) + wti2*dyd(lc+1)
              xyz(2, i, j, k) = wti1*dy(lc) + wti2*dy(lc+1) + xyz0(2, i
     +          , j, k)
              xyzd(3, i, j, k) = wti1*dzd(lc) + wti2*dzd(lc+1)
              xyz(3, i, j, k) = wti1*dz(lc) + wti2*dz(lc+1) + xyz0(3, i
     +          , j, k)
            ENDDO
          END IF
          le = le + 1
          lc = lc + 2
        ENDDO
      ENDDO
C
C     Edges in the J direction:
C
      le = 5
      lc = 1
C
      DO k=1,kl,kl-1
        DO i=1,il,il-1
          IF (iedgeptb(le) .EQ. 1) THEN
            DO j=2,jl-1
              wtj2 = s0(2, i, j, k)
              wtj1 = one - wtj2
              xyzd(1, i, j, k) = wtj1*dxd(lc) + wtj2*dxd(lc+2)
              xyz(1, i, j, k) = wtj1*dx(lc) + wtj2*dx(lc+2) + xyz0(1, i
     +          , j, k)
              xyzd(2, i, j, k) = wtj1*dyd(lc) + wtj2*dyd(lc+2)
              xyz(2, i, j, k) = wtj1*dy(lc) + wtj2*dy(lc+2) + xyz0(2, i
     +          , j, k)
              xyzd(3, i, j, k) = wtj1*dzd(lc) + wtj2*dzd(lc+2)
              xyz(3, i, j, k) = wtj1*dz(lc) + wtj2*dz(lc+2) + xyz0(3, i
     +          , j, k)
            ENDDO
          END IF
          le = le + 1
          lc = lc + 1
        ENDDO
        lc = lc + 2
      ENDDO
C
C     Edges in the K direction:
C
      le = 9
      lc = 1
C
      DO j=1,jl,jl-1
        DO i=1,il,il-1
          IF (iedgeptb(le) .EQ. 1) THEN
            DO k=2,kl-1
              wtk2 = s0(3, i, j, k)
              wtk1 = one - wtk2
              xyzd(1, i, j, k) = wtk1*dxd(lc) + wtk2*dxd(lc+4)
              xyz(1, i, j, k) = wtk1*dx(lc) + wtk2*dx(lc+4) + xyz0(1, i
     +          , j, k)
              xyzd(2, i, j, k) = wtk1*dyd(lc) + wtk2*dyd(lc+4)
              xyz(2, i, j, k) = wtk1*dy(lc) + wtk2*dy(lc+4) + xyz0(2, i
     +          , j, k)
              xyzd(3, i, j, k) = wtk1*dzd(lc) + wtk2*dzd(lc+4)
              xyz(3, i, j, k) = wtk1*dz(lc) + wtk2*dz(lc+4) + xyz0(3, i
     +          , j, k)
            ENDDO
          END IF
          le = le + 1
          lc = lc + 1
        ENDDO
      ENDDO
      DO ii1=1,4
        DO ii2=1,2
          DO ii3=1,kl
            DO ii4=1,jl
              DO ii5=1,3
                dfaceid(ii5, ii4, ii3, ii2, ii1) = 0.0_8
              ENDDO
            ENDDO
          ENDDO
        ENDDO
      ENDDO
      DO ii1=1,4
        DO ii2=1,2
          DO ii3=1,kl
            DO ii4=1,il
              DO ii5=1,3
                dfacejd(ii5, ii4, ii3, ii2, ii1) = 0.0_8
              ENDDO
            ENDDO
          ENDDO
        ENDDO
      ENDDO
      DO ii1=1,4
        DO ii2=1,2
          DO ii3=1,jl
            DO ii4=1,il
              DO ii5=1,3
                dfacekd(ii5, ii4, ii3, ii2, ii1) = 0.0_8
              ENDDO
            ENDDO
          ENDDO
        ENDDO
      ENDDO
C
C     Perturb block faces implicitly affected by explicit edge changes:
C
      DO m=1,6
C
        IF (ifaceptb(m) .EQ. 1) THEN
C
C WARPQ3DM expects one pair of indices to be
          i1 = 1
C equal to define the face
          i2 = il
          j1 = 1
          j2 = jl
          k1 = 1
          k2 = kl
C
          IF (m .EQ. 1) THEN
            i2 = 1
          ELSE IF (m .EQ. 2) THEN
            i1 = il
          ELSE IF (m .EQ. 3) THEN
            j2 = 1
          ELSE IF (m .EQ. 4) THEN
            j1 = jl
          ELSE IF (m .EQ. 5) THEN
            k2 = 1
          ELSE
C  (M .EQ. 6)
            k1 = kl
          END IF
C
          CALL WARPQ3DM_D(il, jl, kl, i1, i2, j1, j2, k1, k2, xyz0, s0, 
     +                    dfacei, dfaceid, dfacej, dfacejd, dfacek, 
     +                    dfacekd, xyz, xyzd)
        END IF
      ENDDO
C
C
C     Perturb the volume grid as though all faces have changed.
C     The face perturbations are stored for all three stages so that
C     the volume points can be perturbed in a single pass.
C
C
C     Stage 1:  Corner motion (only). This stage is reusable by WARPQ3DM.
C     --------
C
C     I = 1 and IL intermediate faces.
C
      CALL DELQ3DM_D(il, jl, kl, 1, 1, 1, jl, 1, kl, xyz0, s0, dfacei(1
     +               , 1, 1, 1, 1), dfaceid(1, 1, 1, 1, 1), dfacej, 
     +               dfacejd, dfacek, dfacekd, xyz, xyzd)
C
      CALL DELQ3DM_D(il, jl, kl, il, il, 1, jl, 1, kl, xyz0, s0, dfacei(
     +               1, 1, 1, 2, 1), dfaceid(1, 1, 1, 2, 1), dfacej, 
     +               dfacejd, dfacek, dfacekd, xyz, xyzd)
C
C     J = 1 and JL intermediate faces.
C
      CALL DELQ3DM_D(il, jl, kl, 1, il, 1, 1, 1, kl, xyz0, s0, dfacei, 
     +               dfaceid, dfacej(1, 1, 1, 1, 1), dfacejd(1, 1, 1, 1
     +               , 1), dfacek, dfacekd, xyz, xyzd)
C
      CALL DELQ3DM_D(il, jl, kl, 1, il, jl, jl, 1, kl, xyz0, s0, dfacei
     +               , dfaceid, dfacej(1, 1, 1, 2, 1), dfacejd(1, 1, 1, 
     +               2, 1), dfacek, dfacekd, xyz, xyzd)
C
C     K = 1 and KL intermediate faces.
C
      CALL DELQ3DM_D(il, jl, kl, 1, il, 1, jl, 1, 1, xyz0, s0, dfacei, 
     +               dfaceid, dfacej, dfacejd, dfacek(1, 1, 1, 1, 1), 
     +               dfacekd(1, 1, 1, 1, 1), xyz, xyzd)
C
      CALL DELQ3DM_D(il, jl, kl, 1, il, 1, jl, kl, kl, xyz0, s0, dfacei
     +               , dfaceid, dfacej, dfacejd, dfacek(1, 1, 1, 2, 1), 
     +               dfacekd(1, 1, 1, 2, 1), xyz, xyzd)
C
C
C     Stage 2:  Handle edge motion from above interim edges to final edges.
C     --------
C
C     James's insight here: consider the 4 faces affected by the motion of
C     4 edges in a given (index) direction; furthermore, keep the two
C     directions of the resulting face perturbations separated for proper
C     weighted combination during the final interpolation into the interior.
C     The 3 index directions are then independent of each other (added).
C
C     I = 1 and IL faces:
C
      l = 1
      DO i=1,il,il-1
C
C        K = 1 and KL edge perturbations (J direction edges):
C
        DO j=2,jl-1
          dfaceid(1, j, 1, l, 2) = xyzd(1, i, j, 1) - dfaceid(1, j, 1, l
     +      , 1)
          dfacei(1, j, 1, l, 2) = xyz(1, i, j, 1) - xyz0(1, i, j, 1) - 
     +      dfacei(1, j, 1, l, 1)
          dfaceid(2, j, 1, l, 2) = xyzd(2, i, j, 1) - dfaceid(2, j, 1, l
     +      , 1)
          dfacei(2, j, 1, l, 2) = xyz(2, i, j, 1) - xyz0(2, i, j, 1) - 
     +      dfacei(2, j, 1, l, 1)
          dfaceid(3, j, 1, l, 2) = xyzd(3, i, j, 1) - dfaceid(3, j, 1, l
     +      , 1)
          dfacei(3, j, 1, l, 2) = xyz(3, i, j, 1) - xyz0(3, i, j, 1) - 
     +      dfacei(3, j, 1, l, 1)
          dfaceid(1, j, kl, l, 2) = xyzd(1, i, j, kl) - dfaceid(1, j, kl
     +      , l, 1)
          dfacei(1, j, kl, l, 2) = xyz(1, i, j, kl) - xyz0(1, i, j, kl) 
     +      - dfacei(1, j, kl, l, 1)
          dfaceid(2, j, kl, l, 2) = xyzd(2, i, j, kl) - dfaceid(2, j, kl
     +      , l, 1)
          dfacei(2, j, kl, l, 2) = xyz(2, i, j, kl) - xyz0(2, i, j, kl) 
     +      - dfacei(2, j, kl, l, 1)
          dfaceid(3, j, kl, l, 2) = xyzd(3, i, j, kl) - dfaceid(3, j, kl
     +      , l, 1)
          dfacei(3, j, kl, l, 2) = xyz(3, i, j, kl) - xyz0(3, i, j, kl) 
     +      - dfacei(3, j, kl, l, 1)
        ENDDO
C
C        J = 1 and JL edge perturbations (K direction edges):
C
        DO k=2,kl-1
          dfaceid(1, 1, k, l, 3) = xyzd(1, i, 1, k) - dfaceid(1, 1, k, l
     +      , 1)
          dfacei(1, 1, k, l, 3) = xyz(1, i, 1, k) - xyz0(1, i, 1, k) - 
     +      dfacei(1, 1, k, l, 1)
          dfaceid(2, 1, k, l, 3) = xyzd(2, i, 1, k) - dfaceid(2, 1, k, l
     +      , 1)
          dfacei(2, 1, k, l, 3) = xyz(2, i, 1, k) - xyz0(2, i, 1, k) - 
     +      dfacei(2, 1, k, l, 1)
          dfaceid(3, 1, k, l, 3) = xyzd(3, i, 1, k) - dfaceid(3, 1, k, l
     +      , 1)
          dfacei(3, 1, k, l, 3) = xyz(3, i, 1, k) - xyz0(3, i, 1, k) - 
     +      dfacei(3, 1, k, l, 1)
          dfaceid(1, jl, k, l, 3) = xyzd(1, i, jl, k) - dfaceid(1, jl, k
     +      , l, 1)
          dfacei(1, jl, k, l, 3) = xyz(1, i, jl, k) - xyz0(1, i, jl, k) 
     +      - dfacei(1, jl, k, l, 1)
          dfaceid(2, jl, k, l, 3) = xyzd(2, i, jl, k) - dfaceid(2, jl, k
     +      , l, 1)
          dfacei(2, jl, k, l, 3) = xyz(2, i, jl, k) - xyz0(2, i, jl, k) 
     +      - dfacei(2, jl, k, l, 1)
          dfaceid(3, jl, k, l, 3) = xyzd(3, i, jl, k) - dfaceid(3, jl, k
     +      , l, 1)
          dfacei(3, jl, k, l, 3) = xyz(3, i, jl, k) - xyz0(3, i, jl, k) 
     +      - dfacei(3, jl, k, l, 1)
        ENDDO
C
C        Interpolate stage 2 interior points for this I face, keeping the
C        two index directions separated.
C
        DO k=2,kl-1
          DO j=2,jl-1
            wtj2 = s0(2, i, j, k)
            wtj1 = one - wtj2
            wtk2 = s0(3, i, j, k)
            wtk1 = one - wtk2
C
            dfaceid(1, j, k, l, 3) = wtj1*dfaceid(1, 1, k, l, 3) + wtj2*
     +        dfaceid(1, jl, k, l, 3)
            dfacei(1, j, k, l, 3) = wtj1*dfacei(1, 1, k, l, 3) + wtj2*
     +        dfacei(1, jl, k, l, 3)
            dfaceid(2, j, k, l, 3) = wtj1*dfaceid(2, 1, k, l, 3) + wtj2*
     +        dfaceid(2, jl, k, l, 3)
            dfacei(2, j, k, l, 3) = wtj1*dfacei(2, 1, k, l, 3) + wtj2*
     +        dfacei(2, jl, k, l, 3)
            dfaceid(3, j, k, l, 3) = wtj1*dfaceid(3, 1, k, l, 3) + wtj2*
     +        dfaceid(3, jl, k, l, 3)
            dfacei(3, j, k, l, 3) = wtj1*dfacei(3, 1, k, l, 3) + wtj2*
     +        dfacei(3, jl, k, l, 3)
C
            dfaceid(1, j, k, l, 2) = wtk1*dfaceid(1, j, 1, l, 2) + wtk2*
     +        dfaceid(1, j, kl, l, 2)
            dfacei(1, j, k, l, 2) = wtk1*dfacei(1, j, 1, l, 2) + wtk2*
     +        dfacei(1, j, kl, l, 2)
            dfaceid(2, j, k, l, 2) = wtk1*dfaceid(2, j, 1, l, 2) + wtk2*
     +        dfaceid(2, j, kl, l, 2)
            dfacei(2, j, k, l, 2) = wtk1*dfacei(2, j, 1, l, 2) + wtk2*
     +        dfacei(2, j, kl, l, 2)
            dfaceid(3, j, k, l, 2) = wtk1*dfaceid(3, j, 1, l, 2) + wtk2*
     +        dfaceid(3, j, kl, l, 2)
            dfacei(3, j, k, l, 2) = wtk1*dfacei(3, j, 1, l, 2) + wtk2*
     +        dfacei(3, j, kl, l, 2)
          ENDDO
        ENDDO
        l = 2
      ENDDO
C
C     J = 1 and JL faces, stage 2:
C
      l = 1
      DO j=1,jl,jl-1
C
C        K = 1 and KL edge perturbations (I direction):
C
        DO i=2,il-1
          dfacejd(1, i, 1, l, 2) = xyzd(1, i, j, 1) - dfacejd(1, i, 1, l
     +      , 1)
          dfacej(1, i, 1, l, 2) = xyz(1, i, j, 1) - xyz0(1, i, j, 1) - 
     +      dfacej(1, i, 1, l, 1)
          dfacejd(2, i, 1, l, 2) = xyzd(2, i, j, 1) - dfacejd(2, i, 1, l
     +      , 1)
          dfacej(2, i, 1, l, 2) = xyz(2, i, j, 1) - xyz0(2, i, j, 1) - 
     +      dfacej(2, i, 1, l, 1)
          dfacejd(3, i, 1, l, 2) = xyzd(3, i, j, 1) - dfacejd(3, i, 1, l
     +      , 1)
          dfacej(3, i, 1, l, 2) = xyz(3, i, j, 1) - xyz0(3, i, j, 1) - 
     +      dfacej(3, i, 1, l, 1)
          dfacejd(1, i, kl, l, 2) = xyzd(1, i, j, kl) - dfacejd(1, i, kl
     +      , l, 1)
          dfacej(1, i, kl, l, 2) = xyz(1, i, j, kl) - xyz0(1, i, j, kl) 
     +      - dfacej(1, i, kl, l, 1)
          dfacejd(2, i, kl, l, 2) = xyzd(2, i, j, kl) - dfacejd(2, i, kl
     +      , l, 1)
          dfacej(2, i, kl, l, 2) = xyz(2, i, j, kl) - xyz0(2, i, j, kl) 
     +      - dfacej(2, i, kl, l, 1)
          dfacejd(3, i, kl, l, 2) = xyzd(3, i, j, kl) - dfacejd(3, i, kl
     +      , l, 1)
          dfacej(3, i, kl, l, 2) = xyz(3, i, j, kl) - xyz0(3, i, j, kl) 
     +      - dfacej(3, i, kl, l, 1)
        ENDDO
C
C        I = 1 and IL edge perturbations (K direction):
C
        DO k=2,kl-1
          dfacejd(1, 1, k, l, 3) = xyzd(1, 1, j, k) - dfacejd(1, 1, k, l
     +      , 1)
          dfacej(1, 1, k, l, 3) = xyz(1, 1, j, k) - xyz0(1, 1, j, k) - 
     +      dfacej(1, 1, k, l, 1)
          dfacejd(2, 1, k, l, 3) = xyzd(2, 1, j, k) - dfacejd(2, 1, k, l
     +      , 1)
          dfacej(2, 1, k, l, 3) = xyz(2, 1, j, k) - xyz0(2, 1, j, k) - 
     +      dfacej(2, 1, k, l, 1)
          dfacejd(3, 1, k, l, 3) = xyzd(3, 1, j, k) - dfacejd(3, 1, k, l
     +      , 1)
          dfacej(3, 1, k, l, 3) = xyz(3, 1, j, k) - xyz0(3, 1, j, k) - 
     +      dfacej(3, 1, k, l, 1)
          dfacejd(1, il, k, l, 3) = xyzd(1, il, j, k) - dfacejd(1, il, k
     +      , l, 1)
          dfacej(1, il, k, l, 3) = xyz(1, il, j, k) - xyz0(1, il, j, k) 
     +      - dfacej(1, il, k, l, 1)
          dfacejd(2, il, k, l, 3) = xyzd(2, il, j, k) - dfacejd(2, il, k
     +      , l, 1)
          dfacej(2, il, k, l, 3) = xyz(2, il, j, k) - xyz0(2, il, j, k) 
     +      - dfacej(2, il, k, l, 1)
          dfacejd(3, il, k, l, 3) = xyzd(3, il, j, k) - dfacejd(3, il, k
     +      , l, 1)
          dfacej(3, il, k, l, 3) = xyz(3, il, j, k) - xyz0(3, il, j, k) 
     +      - dfacej(3, il, k, l, 1)
        ENDDO
C
C        Interpolate stage 2 interior points for this J face.
C
        DO k=2,kl-1
          DO i=2,il-1
            wti2 = s0(1, i, j, k)
            wti1 = one - wti2
            wtk2 = s0(3, i, j, k)
            wtk1 = one - wtk2
C
            dfacejd(1, i, k, l, 3) = wti1*dfacejd(1, 1, k, l, 3) + wti2*
     +        dfacejd(1, il, k, l, 3)
            dfacej(1, i, k, l, 3) = wti1*dfacej(1, 1, k, l, 3) + wti2*
     +        dfacej(1, il, k, l, 3)
            dfacejd(2, i, k, l, 3) = wti1*dfacejd(2, 1, k, l, 3) + wti2*
     +        dfacejd(2, il, k, l, 3)
            dfacej(2, i, k, l, 3) = wti1*dfacej(2, 1, k, l, 3) + wti2*
     +        dfacej(2, il, k, l, 3)
            dfacejd(3, i, k, l, 3) = wti1*dfacejd(3, 1, k, l, 3) + wti2*
     +        dfacejd(3, il, k, l, 3)
            dfacej(3, i, k, l, 3) = wti1*dfacej(3, 1, k, l, 3) + wti2*
     +        dfacej(3, il, k, l, 3)
C
            dfacejd(1, i, k, l, 2) = wtk1*dfacejd(1, i, 1, l, 2) + wtk2*
     +        dfacejd(1, i, kl, l, 2)
            dfacej(1, i, k, l, 2) = wtk1*dfacej(1, i, 1, l, 2) + wtk2*
     +        dfacej(1, i, kl, l, 2)
            dfacejd(2, i, k, l, 2) = wtk1*dfacejd(2, i, 1, l, 2) + wtk2*
     +        dfacejd(2, i, kl, l, 2)
            dfacej(2, i, k, l, 2) = wtk1*dfacej(2, i, 1, l, 2) + wtk2*
     +        dfacej(2, i, kl, l, 2)
            dfacejd(3, i, k, l, 2) = wtk1*dfacejd(3, i, 1, l, 2) + wtk2*
     +        dfacejd(3, i, kl, l, 2)
            dfacej(3, i, k, l, 2) = wtk1*dfacej(3, i, 1, l, 2) + wtk2*
     +        dfacej(3, i, kl, l, 2)
          ENDDO
        ENDDO
        l = 2
      ENDDO
C
C     K = 1 and KL faces, stage 2:
C
      l = 1
      DO k=1,kl,kl-1
C
C        J = 1 and JL edge perturbations (I direction):
C
        DO i=2,il-1
          dfacekd(1, i, 1, l, 2) = xyzd(1, i, 1, k) - dfacekd(1, i, 1, l
     +      , 1)
          dfacek(1, i, 1, l, 2) = xyz(1, i, 1, k) - xyz0(1, i, 1, k) - 
     +      dfacek(1, i, 1, l, 1)
          dfacekd(2, i, 1, l, 2) = xyzd(2, i, 1, k) - dfacekd(2, i, 1, l
     +      , 1)
          dfacek(2, i, 1, l, 2) = xyz(2, i, 1, k) - xyz0(2, i, 1, k) - 
     +      dfacek(2, i, 1, l, 1)
          dfacekd(3, i, 1, l, 2) = xyzd(3, i, 1, k) - dfacekd(3, i, 1, l
     +      , 1)
          dfacek(3, i, 1, l, 2) = xyz(3, i, 1, k) - xyz0(3, i, 1, k) - 
     +      dfacek(3, i, 1, l, 1)
          dfacekd(1, i, jl, l, 2) = xyzd(1, i, jl, k) - dfacekd(1, i, jl
     +      , l, 1)
          dfacek(1, i, jl, l, 2) = xyz(1, i, jl, k) - xyz0(1, i, jl, k) 
     +      - dfacek(1, i, jl, l, 1)
          dfacekd(2, i, jl, l, 2) = xyzd(2, i, jl, k) - dfacekd(2, i, jl
     +      , l, 1)
          dfacek(2, i, jl, l, 2) = xyz(2, i, jl, k) - xyz0(2, i, jl, k) 
     +      - dfacek(2, i, jl, l, 1)
          dfacekd(3, i, jl, l, 2) = xyzd(3, i, jl, k) - dfacekd(3, i, jl
     +      , l, 1)
          dfacek(3, i, jl, l, 2) = xyz(3, i, jl, k) - xyz0(3, i, jl, k) 
     +      - dfacek(3, i, jl, l, 1)
        ENDDO
C
C        I = 1 and IL edge perturbations (J direction):
C
        DO j=2,jl-1
          dfacekd(1, 1, j, l, 3) = xyzd(1, 1, j, k) - dfacekd(1, 1, j, l
     +      , 1)
          dfacek(1, 1, j, l, 3) = xyz(1, 1, j, k) - xyz0(1, 1, j, k) - 
     +      dfacek(1, 1, j, l, 1)
          dfacekd(2, 1, j, l, 3) = xyzd(2, 1, j, k) - dfacekd(2, 1, j, l
     +      , 1)
          dfacek(2, 1, j, l, 3) = xyz(2, 1, j, k) - xyz0(2, 1, j, k) - 
     +      dfacek(2, 1, j, l, 1)
          dfacekd(3, 1, j, l, 3) = xyzd(3, 1, j, k) - dfacekd(3, 1, j, l
     +      , 1)
          dfacek(3, 1, j, l, 3) = xyz(3, 1, j, k) - xyz0(3, 1, j, k) - 
     +      dfacek(3, 1, j, l, 1)
          dfacekd(1, il, j, l, 3) = xyzd(1, il, j, k) - dfacekd(1, il, j
     +      , l, 1)
          dfacek(1, il, j, l, 3) = xyz(1, il, j, k) - xyz0(1, il, j, k) 
     +      - dfacek(1, il, j, l, 1)
          dfacekd(2, il, j, l, 3) = xyzd(2, il, j, k) - dfacekd(2, il, j
     +      , l, 1)
          dfacek(2, il, j, l, 3) = xyz(2, il, j, k) - xyz0(2, il, j, k) 
     +      - dfacek(2, il, j, l, 1)
          dfacekd(3, il, j, l, 3) = xyzd(3, il, j, k) - dfacekd(3, il, j
     +      , l, 1)
          dfacek(3, il, j, l, 3) = xyz(3, il, j, k) - xyz0(3, il, j, k) 
     +      - dfacek(3, il, j, l, 1)
        ENDDO
C
C        Interpolate stage 2 interior points for this K face.
C
        DO j=2,jl-1
          DO i=2,il-1
            wti2 = s0(1, i, j, k)
            wti1 = one - wti2
            wtj2 = s0(2, i, j, k)
            wtj1 = one - wtj2
C
            dfacekd(1, i, j, l, 3) = wti1*dfacekd(1, 1, j, l, 3) + wti2*
     +        dfacekd(1, il, j, l, 3)
            dfacek(1, i, j, l, 3) = wti1*dfacek(1, 1, j, l, 3) + wti2*
     +        dfacek(1, il, j, l, 3)
            dfacekd(2, i, j, l, 3) = wti1*dfacekd(2, 1, j, l, 3) + wti2*
     +        dfacekd(2, il, j, l, 3)
            dfacek(2, i, j, l, 3) = wti1*dfacek(2, 1, j, l, 3) + wti2*
     +        dfacek(2, il, j, l, 3)
            dfacekd(3, i, j, l, 3) = wti1*dfacekd(3, 1, j, l, 3) + wti2*
     +        dfacekd(3, il, j, l, 3)
            dfacek(3, i, j, l, 3) = wti1*dfacek(3, 1, j, l, 3) + wti2*
     +        dfacek(3, il, j, l, 3)
C
            dfacekd(1, i, j, l, 2) = wtj1*dfacekd(1, i, 1, l, 2) + wtj2*
     +        dfacekd(1, i, jl, l, 2)
            dfacek(1, i, j, l, 2) = wtj1*dfacek(1, i, 1, l, 2) + wtj2*
     +        dfacek(1, i, jl, l, 2)
            dfacekd(2, i, j, l, 2) = wtj1*dfacekd(2, i, 1, l, 2) + wtj2*
     +        dfacekd(2, i, jl, l, 2)
            dfacek(2, i, j, l, 2) = wtj1*dfacek(2, i, 1, l, 2) + wtj2*
     +        dfacek(2, i, jl, l, 2)
            dfacekd(3, i, j, l, 2) = wtj1*dfacekd(3, i, 1, l, 2) + wtj2*
     +        dfacekd(3, i, jl, l, 2)
            dfacek(3, i, j, l, 2) = wtj1*dfacek(3, i, 1, l, 2) + wtj2*
     +        dfacek(3, i, jl, l, 2)
          ENDDO
        ENDDO
        l = 2
      ENDDO
C
C
C     Stage 3:  Handle face motion from above interim faces to final faces.
C     --------
C
      DO k=2,kl-1
        DO j=2,jl-1
          dfaceid(1, j, k, 1, 4) = xyzd(1, 1, j, k) - dfaceid(1, j, k, 1
     +      , 1) - dfaceid(1, j, k, 1, 2) - dfaceid(1, j, k, 1, 3)
          dfacei(1, j, k, 1, 4) = xyz(1, 1, j, k) - xyz0(1, 1, j, k) - 
     +      dfacei(1, j, k, 1, 1) - dfacei(1, j, k, 1, 2) - dfacei(1, j
     +      , k, 1, 3)
          dfaceid(2, j, k, 1, 4) = xyzd(2, 1, j, k) - dfaceid(2, j, k, 1
     +      , 1) - dfaceid(2, j, k, 1, 2) - dfaceid(2, j, k, 1, 3)
          dfacei(2, j, k, 1, 4) = xyz(2, 1, j, k) - xyz0(2, 1, j, k) - 
     +      dfacei(2, j, k, 1, 1) - dfacei(2, j, k, 1, 2) - dfacei(2, j
     +      , k, 1, 3)
          dfaceid(3, j, k, 1, 4) = xyzd(3, 1, j, k) - dfaceid(3, j, k, 1
     +      , 1) - dfaceid(3, j, k, 1, 2) - dfaceid(3, j, k, 1, 3)
          dfacei(3, j, k, 1, 4) = xyz(3, 1, j, k) - xyz0(3, 1, j, k) - 
     +      dfacei(3, j, k, 1, 1) - dfacei(3, j, k, 1, 2) - dfacei(3, j
     +      , k, 1, 3)
          dfaceid(1, j, k, 2, 4) = xyzd(1, il, j, k) - dfaceid(1, j, k, 
     +      2, 1) - dfaceid(1, j, k, 2, 2) - dfaceid(1, j, k, 2, 3)
          dfacei(1, j, k, 2, 4) = xyz(1, il, j, k) - xyz0(1, il, j, k) -
     +      dfacei(1, j, k, 2, 1) - dfacei(1, j, k, 2, 2) - dfacei(1, j
     +      , k, 2, 3)
          dfaceid(2, j, k, 2, 4) = xyzd(2, il, j, k) - dfaceid(2, j, k, 
     +      2, 1) - dfaceid(2, j, k, 2, 2) - dfaceid(2, j, k, 2, 3)
          dfacei(2, j, k, 2, 4) = xyz(2, il, j, k) - xyz0(2, il, j, k) -
     +      dfacei(2, j, k, 2, 1) - dfacei(2, j, k, 2, 2) - dfacei(2, j
     +      , k, 2, 3)
          dfaceid(3, j, k, 2, 4) = xyzd(3, il, j, k) - dfaceid(3, j, k, 
     +      2, 1) - dfaceid(3, j, k, 2, 2) - dfaceid(3, j, k, 2, 3)
          dfacei(3, j, k, 2, 4) = xyz(3, il, j, k) - xyz0(3, il, j, k) -
     +      dfacei(3, j, k, 2, 1) - dfacei(3, j, k, 2, 2) - dfacei(3, j
     +      , k, 2, 3)
        ENDDO
C
        DO i=2,il-1
          dfacejd(1, i, k, 1, 4) = xyzd(1, i, 1, k) - dfacejd(1, i, k, 1
     +      , 1) - dfacejd(1, i, k, 1, 2) - dfacejd(1, i, k, 1, 3)
          dfacej(1, i, k, 1, 4) = xyz(1, i, 1, k) - xyz0(1, i, 1, k) - 
     +      dfacej(1, i, k, 1, 1) - dfacej(1, i, k, 1, 2) - dfacej(1, i
     +      , k, 1, 3)
          dfacejd(2, i, k, 1, 4) = xyzd(2, i, 1, k) - dfacejd(2, i, k, 1
     +      , 1) - dfacejd(2, i, k, 1, 2) - dfacejd(2, i, k, 1, 3)
          dfacej(2, i, k, 1, 4) = xyz(2, i, 1, k) - xyz0(2, i, 1, k) - 
     +      dfacej(2, i, k, 1, 1) - dfacej(2, i, k, 1, 2) - dfacej(2, i
     +      , k, 1, 3)
          dfacejd(3, i, k, 1, 4) = xyzd(3, i, 1, k) - dfacejd(3, i, k, 1
     +      , 1) - dfacejd(3, i, k, 1, 2) - dfacejd(3, i, k, 1, 3)
          dfacej(3, i, k, 1, 4) = xyz(3, i, 1, k) - xyz0(3, i, 1, k) - 
     +      dfacej(3, i, k, 1, 1) - dfacej(3, i, k, 1, 2) - dfacej(3, i
     +      , k, 1, 3)
          dfacejd(1, i, k, 2, 4) = xyzd(1, i, jl, k) - dfacejd(1, i, k, 
     +      2, 1) - dfacejd(1, i, k, 2, 2) - dfacejd(1, i, k, 2, 3)
          dfacej(1, i, k, 2, 4) = xyz(1, i, jl, k) - xyz0(1, i, jl, k) -
     +      dfacej(1, i, k, 2, 1) - dfacej(1, i, k, 2, 2) - dfacej(1, i
     +      , k, 2, 3)
          dfacejd(2, i, k, 2, 4) = xyzd(2, i, jl, k) - dfacejd(2, i, k, 
     +      2, 1) - dfacejd(2, i, k, 2, 2) - dfacejd(2, i, k, 2, 3)
          dfacej(2, i, k, 2, 4) = xyz(2, i, jl, k) - xyz0(2, i, jl, k) -
     +      dfacej(2, i, k, 2, 1) - dfacej(2, i, k, 2, 2) - dfacej(2, i
     +      , k, 2, 3)
          dfacejd(3, i, k, 2, 4) = xyzd(3, i, jl, k) - dfacejd(3, i, k, 
     +      2, 1) - dfacejd(3, i, k, 2, 2) - dfacejd(3, i, k, 2, 3)
          dfacej(3, i, k, 2, 4) = xyz(3, i, jl, k) - xyz0(3, i, jl, k) -
     +      dfacej(3, i, k, 2, 1) - dfacej(3, i, k, 2, 2) - dfacej(3, i
     +      , k, 2, 3)
        ENDDO
      ENDDO
C
      DO j=2,jl-1
        DO i=2,il-1
          dfacekd(1, i, j, 1, 4) = xyzd(1, i, j, 1) - dfacekd(1, i, j, 1
     +      , 1) - dfacekd(1, i, j, 1, 2) - dfacekd(1, i, j, 1, 3)
          dfacek(1, i, j, 1, 4) = xyz(1, i, j, 1) - xyz0(1, i, j, 1) - 
     +      dfacek(1, i, j, 1, 1) - dfacek(1, i, j, 1, 2) - dfacek(1, i
     +      , j, 1, 3)
          dfacekd(2, i, j, 1, 4) = xyzd(2, i, j, 1) - dfacekd(2, i, j, 1
     +      , 1) - dfacekd(2, i, j, 1, 2) - dfacekd(2, i, j, 1, 3)
          dfacek(2, i, j, 1, 4) = xyz(2, i, j, 1) - xyz0(2, i, j, 1) - 
     +      dfacek(2, i, j, 1, 1) - dfacek(2, i, j, 1, 2) - dfacek(2, i
     +      , j, 1, 3)
          dfacekd(3, i, j, 1, 4) = xyzd(3, i, j, 1) - dfacekd(3, i, j, 1
     +      , 1) - dfacekd(3, i, j, 1, 2) - dfacekd(3, i, j, 1, 3)
          dfacek(3, i, j, 1, 4) = xyz(3, i, j, 1) - xyz0(3, i, j, 1) - 
     +      dfacek(3, i, j, 1, 1) - dfacek(3, i, j, 1, 2) - dfacek(3, i
     +      , j, 1, 3)
          dfacekd(1, i, j, 2, 4) = xyzd(1, i, j, kl) - dfacekd(1, i, j, 
     +      2, 1) - dfacekd(1, i, j, 2, 2) - dfacekd(1, i, j, 2, 3)
          dfacek(1, i, j, 2, 4) = xyz(1, i, j, kl) - xyz0(1, i, j, kl) -
     +      dfacek(1, i, j, 2, 1) - dfacek(1, i, j, 2, 2) - dfacek(1, i
     +      , j, 2, 3)
          dfacekd(2, i, j, 2, 4) = xyzd(2, i, j, kl) - dfacekd(2, i, j, 
     +      2, 1) - dfacekd(2, i, j, 2, 2) - dfacekd(2, i, j, 2, 3)
          dfacek(2, i, j, 2, 4) = xyz(2, i, j, kl) - xyz0(2, i, j, kl) -
     +      dfacek(2, i, j, 2, 1) - dfacek(2, i, j, 2, 2) - dfacek(2, i
     +      , j, 2, 3)
          dfacekd(3, i, j, 2, 4) = xyzd(3, i, j, kl) - dfacekd(3, i, j, 
     +      2, 1) - dfacekd(3, i, j, 2, 2) - dfacekd(3, i, j, 2, 3)
          dfacek(3, i, j, 2, 4) = xyz(3, i, j, kl) - xyz0(3, i, j, kl) -
     +      dfacek(3, i, j, 2, 1) - dfacek(3, i, j, 2, 2) - dfacek(3, i
     +      , j, 2, 3)
        ENDDO
      ENDDO
C
C
C     Perturb the interior volume points.
C     All stages are performed at once via interpolation from the face
C     perturbations stored for each stage.  Note that the three stages
C     accumulate the contributions from the three subscript directions
C     with varying degrees of independence.
C
      DO k=2,kl-1
        DO j=2,jl-1
          DO i=2,il-1
            wti2 = s0(1, i, j, k)
            wti1 = one - wti2
            wtj2 = s0(2, i, j, k)
            wtj1 = one - wtj2
            wtk2 = s0(3, i, j, k)
            wtk1 = one - wtk2
C
C              Stage 1:
C
            delid = wti1*dfaceid(1, j, k, 1, 1) + wti2*dfaceid(1, j, k, 
     +        2, 1)
            deli = wti1*dfacei(1, j, k, 1, 1) + wti2*dfacei(1, j, k, 2, 
     +        1)
            deljd = wtj1*dfacejd(1, i, k, 1, 1) + wtj2*dfacejd(1, i, k, 
     +        2, 1)
            delj = wtj1*dfacej(1, i, k, 1, 1) + wtj2*dfacej(1, i, k, 2, 
     +        1)
            delkd = wtk1*dfacekd(1, i, j, 1, 1) + wtk2*dfacekd(1, i, j, 
     +        2, 1)
            delk = wtk1*dfacek(1, i, j, 1, 1) + wtk2*dfacek(1, i, j, 2, 
     +        1)
            IF (deli .GE. 0.) THEN
              abs1d = delid
              abs1 = deli
            ELSE
              abs1d = -delid
              abs1 = -deli
            END IF
            IF (delj .GE. 0.) THEN
              abs13d = deljd
              abs13 = delj
            ELSE
              abs13d = -deljd
              abs13 = -delj
            END IF
            IF (delk .GE. 0.) THEN
              abs25d = delkd
              abs25 = delk
            ELSE
              abs25d = -delkd
              abs25 = -delk
            END IF
            IF (deli .GE. 0.) THEN
              abs37d = delid
              abs37 = deli
            ELSE
              abs37d = -delid
              abs37 = -deli
            END IF
            IF (delj .GE. 0.) THEN
              abs49d = deljd
              abs49 = delj
            ELSE
              abs49d = -deljd
              abs49 = -delj
            END IF
            IF (delk .GE. 0.) THEN
              abs52d = delkd
              abs52 = delk
            ELSE
              abs52d = -delkd
              abs52 = -delk
            END IF
            x10d = abs37d + abs49d + abs52d
            x10 = abs37 + abs49 + abs52
            IF (x10 .LT. eps) THEN
              max10 = eps
              max10d = 0.0_8
            ELSE
              max10d = x10d
              max10 = x10
            END IF
C
            del1d = ((abs1d*deli+abs1*delid+abs13d*delj+abs13*deljd+
     +        abs25d*delk+abs25*delkd)*max10-(abs1*deli+abs13*delj+abs25
     +        *delk)*max10d)/max10**2
            del1 = (abs1*deli+abs13*delj+abs25*delk)/max10
C
C              Stage 2:
C
            delijd = wtj1*dfacejd(1, i, k, 1, 2) + wtj2*dfacejd(1, i, k
     +        , 2, 2)
            delij = wtj1*dfacej(1, i, k, 1, 2) + wtj2*dfacej(1, i, k, 2
     +        , 2)
            delikd = wtk1*dfacekd(1, i, j, 1, 2) + wtk2*dfacekd(1, i, j
     +        , 2, 2)
            delik = wtk1*dfacek(1, i, j, 1, 2) + wtk2*dfacek(1, i, j, 2
     +        , 2)
            IF (delij .GE. 0.) THEN
              abs2d = delijd
              abs2 = delij
            ELSE
              abs2d = -delijd
              abs2 = -delij
            END IF
            IF (delik .GE. 0.) THEN
              abs14d = delikd
              abs14 = delik
            ELSE
              abs14d = -delikd
              abs14 = -delik
            END IF
            IF (delij .GE. 0.) THEN
              abs28d = delijd
              abs28 = delij
            ELSE
              abs28d = -delijd
              abs28 = -delij
            END IF
            IF (delik .GE. 0.) THEN
              abs38d = delikd
              abs38 = delik
            ELSE
              abs38d = -delikd
              abs38 = -delik
            END IF
            x1d = abs28d + abs38d
            x1 = abs28 + abs38
            IF (x1 .LT. eps) THEN
              max1 = eps
              max1d = 0.0_8
            ELSE
              max1d = x1d
              max1 = x1
            END IF
            delid = ((abs2d*delij+abs2*delijd+abs14d*delik+abs14*delikd)
     +        *max1-(abs2*delij+abs14*delik)*max1d)/max1**2
            deli = (abs2*delij+abs14*delik)/max1
C
            deljid = wti1*dfaceid(1, j, k, 1, 2) + wti2*dfaceid(1, j, k
     +        , 2, 2)
            delji = wti1*dfacei(1, j, k, 1, 2) + wti2*dfacei(1, j, k, 2
     +        , 2)
            deljkd = wtk1*dfacekd(1, i, j, 1, 3) + wtk2*dfacekd(1, i, j
     +        , 2, 3)
            deljk = wtk1*dfacek(1, i, j, 1, 3) + wtk2*dfacek(1, i, j, 2
     +        , 3)
            IF (delji .GE. 0.) THEN
              abs3d = deljid
              abs3 = delji
            ELSE
              abs3d = -deljid
              abs3 = -delji
            END IF
            IF (deljk .GE. 0.) THEN
              abs15d = deljkd
              abs15 = deljk
            ELSE
              abs15d = -deljkd
              abs15 = -deljk
            END IF
            IF (delji .GE. 0.) THEN
              abs29d = deljid
              abs29 = delji
            ELSE
              abs29d = -deljid
              abs29 = -delji
            END IF
            IF (deljk .GE. 0.) THEN
              abs39d = deljkd
              abs39 = deljk
            ELSE
              abs39d = -deljkd
              abs39 = -deljk
            END IF
            x2d = abs29d + abs39d
            x2 = abs29 + abs39
            IF (x2 .LT. eps) THEN
              max2 = eps
              max2d = 0.0_8
            ELSE
              max2d = x2d
              max2 = x2
            END IF
            deljd = ((abs3d*delji+abs3*deljid+abs15d*deljk+abs15*deljkd)
     +        *max2-(abs3*delji+abs15*deljk)*max2d)/max2**2
            delj = (abs3*delji+abs15*deljk)/max2
C
            delkid = wti1*dfaceid(1, j, k, 1, 3) + wti2*dfaceid(1, j, k
     +        , 2, 3)
            delki = wti1*dfacei(1, j, k, 1, 3) + wti2*dfacei(1, j, k, 2
     +        , 3)
            delkjd = wtj1*dfacejd(1, i, k, 1, 3) + wtj2*dfacejd(1, i, k
     +        , 2, 3)
            delkj = wtj1*dfacej(1, i, k, 1, 3) + wtj2*dfacej(1, i, k, 2
     +        , 3)
            IF (delki .GE. 0.) THEN
              abs4d = delkid
              abs4 = delki
            ELSE
              abs4d = -delkid
              abs4 = -delki
            END IF
            IF (delkj .GE. 0.) THEN
              abs16d = delkjd
              abs16 = delkj
            ELSE
              abs16d = -delkjd
              abs16 = -delkj
            END IF
            IF (delki .GE. 0.) THEN
              abs30d = delkid
              abs30 = delki
            ELSE
              abs30d = -delkid
              abs30 = -delki
            END IF
            IF (delkj .GE. 0.) THEN
              abs40d = delkjd
              abs40 = delkj
            ELSE
              abs40d = -delkjd
              abs40 = -delkj
            END IF
            x3d = abs30d + abs40d
            x3 = abs30 + abs40
            IF (x3 .LT. eps) THEN
              max3 = eps
              max3d = 0.0_8
            ELSE
              max3d = x3d
              max3 = x3
            END IF
            delkd = ((abs4d*delki+abs4*delkid+abs16d*delkj+abs16*delkjd)
     +        *max3-(abs4*delki+abs16*delkj)*max3d)/max3**2
            delk = (abs4*delki+abs16*delkj)/max3
C
            del2d = delid + deljd + delkd
            del2 = deli + delj + delk
C
C              Stage 3:
C
            delid = wti1*dfaceid(1, j, k, 1, 4) + wti2*dfaceid(1, j, k, 
     +        2, 4)
            deli = wti1*dfacei(1, j, k, 1, 4) + wti2*dfacei(1, j, k, 2, 
     +        4)
            deljd = wtj1*dfacejd(1, i, k, 1, 4) + wtj2*dfacejd(1, i, k, 
     +        2, 4)
            delj = wtj1*dfacej(1, i, k, 1, 4) + wtj2*dfacej(1, i, k, 2, 
     +        4)
            delkd = wtk1*dfacekd(1, i, j, 1, 4) + wtk2*dfacekd(1, i, j, 
     +        2, 4)
            delk = wtk1*dfacek(1, i, j, 1, 4) + wtk2*dfacek(1, i, j, 2, 
     +        4)
C
            xyzd(1, i, j, k) = del1d + del2d + delid + deljd + delkd
            xyz(1, i, j, k) = xyz0(1, i, j, k) + del1 + del2 + deli + 
     +        delj + delk
C
C              Repeat all stages for Y perturbations:
C
            delid = wti1*dfaceid(2, j, k, 1, 1) + wti2*dfaceid(2, j, k, 
     +        2, 1)
            deli = wti1*dfacei(2, j, k, 1, 1) + wti2*dfacei(2, j, k, 2, 
     +        1)
            deljd = wtj1*dfacejd(2, i, k, 1, 1) + wtj2*dfacejd(2, i, k, 
     +        2, 1)
            delj = wtj1*dfacej(2, i, k, 1, 1) + wtj2*dfacej(2, i, k, 2, 
     +        1)
            delkd = wtk1*dfacekd(2, i, j, 1, 1) + wtk2*dfacekd(2, i, j, 
     +        2, 1)
            delk = wtk1*dfacek(2, i, j, 1, 1) + wtk2*dfacek(2, i, j, 2, 
     +        1)
            IF (deli .GE. 0.) THEN
              abs5d = delid
              abs5 = deli
            ELSE
              abs5d = -delid
              abs5 = -deli
            END IF
            IF (delj .GE. 0.) THEN
              abs17d = deljd
              abs17 = delj
            ELSE
              abs17d = -deljd
              abs17 = -delj
            END IF
            IF (delk .GE. 0.) THEN
              abs26d = delkd
              abs26 = delk
            ELSE
              abs26d = -delkd
              abs26 = -delk
            END IF
            IF (deli .GE. 0.) THEN
              abs41d = delid
              abs41 = deli
            ELSE
              abs41d = -delid
              abs41 = -deli
            END IF
            IF (delj .GE. 0.) THEN
              abs50d = deljd
              abs50 = delj
            ELSE
              abs50d = -deljd
              abs50 = -delj
            END IF
            IF (delk .GE. 0.) THEN
              abs53d = delkd
              abs53 = delk
            ELSE
              abs53d = -delkd
              abs53 = -delk
            END IF
            x11d = abs41d + abs50d + abs53d
            x11 = abs41 + abs50 + abs53
            IF (x11 .LT. eps) THEN
              max11 = eps
              max11d = 0.0_8
            ELSE
              max11d = x11d
              max11 = x11
            END IF
C
            del1d = ((abs5d*deli+abs5*delid+abs17d*delj+abs17*deljd+
     +        abs26d*delk+abs26*delkd)*max11-(abs5*deli+abs17*delj+abs26
     +        *delk)*max11d)/max11**2
            del1 = (abs5*deli+abs17*delj+abs26*delk)/max11
C
            delijd = wtj1*dfacejd(2, i, k, 1, 2) + wtj2*dfacejd(2, i, k
     +        , 2, 2)
            delij = wtj1*dfacej(2, i, k, 1, 2) + wtj2*dfacej(2, i, k, 2
     +        , 2)
            delikd = wtk1*dfacekd(2, i, j, 1, 2) + wtk2*dfacekd(2, i, j
     +        , 2, 2)
            delik = wtk1*dfacek(2, i, j, 1, 2) + wtk2*dfacek(2, i, j, 2
     +        , 2)
            IF (delij .GE. 0.) THEN
              abs6d = delijd
              abs6 = delij
            ELSE
              abs6d = -delijd
              abs6 = -delij
            END IF
            IF (delik .GE. 0.) THEN
              abs18d = delikd
              abs18 = delik
            ELSE
              abs18d = -delikd
              abs18 = -delik
            END IF
            IF (delij .GE. 0.) THEN
              abs31d = delijd
              abs31 = delij
            ELSE
              abs31d = -delijd
              abs31 = -delij
            END IF
            IF (delik .GE. 0.) THEN
              abs42d = delikd
              abs42 = delik
            ELSE
              abs42d = -delikd
              abs42 = -delik
            END IF
            x4d = abs31d + abs42d
            x4 = abs31 + abs42
            IF (x4 .LT. eps) THEN
              max4 = eps
              max4d = 0.0_8
            ELSE
              max4d = x4d
              max4 = x4
            END IF
            delid = ((abs6d*delij+abs6*delijd+abs18d*delik+abs18*delikd)
     +        *max4-(abs6*delij+abs18*delik)*max4d)/max4**2
            deli = (abs6*delij+abs18*delik)/max4
C
            deljid = wti1*dfaceid(2, j, k, 1, 2) + wti2*dfaceid(2, j, k
     +        , 2, 2)
            delji = wti1*dfacei(2, j, k, 1, 2) + wti2*dfacei(2, j, k, 2
     +        , 2)
            deljkd = wtk1*dfacekd(2, i, j, 1, 3) + wtk2*dfacekd(2, i, j
     +        , 2, 3)
            deljk = wtk1*dfacek(2, i, j, 1, 3) + wtk2*dfacek(2, i, j, 2
     +        , 3)
            IF (delji .GE. 0.) THEN
              abs7d = deljid
              abs7 = delji
            ELSE
              abs7d = -deljid
              abs7 = -delji
            END IF
            IF (deljk .GE. 0.) THEN
              abs19d = deljkd
              abs19 = deljk
            ELSE
              abs19d = -deljkd
              abs19 = -deljk
            END IF
            IF (delji .GE. 0.) THEN
              abs32d = deljid
              abs32 = delji
            ELSE
              abs32d = -deljid
              abs32 = -delji
            END IF
            IF (deljk .GE. 0.) THEN
              abs43d = deljkd
              abs43 = deljk
            ELSE
              abs43d = -deljkd
              abs43 = -deljk
            END IF
            x5d = abs32d + abs43d
            x5 = abs32 + abs43
            IF (x5 .LT. eps) THEN
              max5 = eps
              max5d = 0.0_8
            ELSE
              max5d = x5d
              max5 = x5
            END IF
            deljd = ((abs7d*delji+abs7*deljid+abs19d*deljk+abs19*deljkd)
     +        *max5-(abs7*delji+abs19*deljk)*max5d)/max5**2
            delj = (abs7*delji+abs19*deljk)/max5
C
            delkid = wti1*dfaceid(2, j, k, 1, 3) + wti2*dfaceid(2, j, k
     +        , 2, 3)
            delki = wti1*dfacei(2, j, k, 1, 3) + wti2*dfacei(2, j, k, 2
     +        , 3)
            delkjd = wtj1*dfacejd(2, i, k, 1, 3) + wtj2*dfacejd(2, i, k
     +        , 2, 3)
            delkj = wtj1*dfacej(2, i, k, 1, 3) + wtj2*dfacej(2, i, k, 2
     +        , 3)
            IF (delki .GE. 0.) THEN
              abs8d = delkid
              abs8 = delki
            ELSE
              abs8d = -delkid
              abs8 = -delki
            END IF
            IF (delkj .GE. 0.) THEN
              abs20d = delkjd
              abs20 = delkj
            ELSE
              abs20d = -delkjd
              abs20 = -delkj
            END IF
            IF (delki .GE. 0.) THEN
              abs33d = delkid
              abs33 = delki
            ELSE
              abs33d = -delkid
              abs33 = -delki
            END IF
            IF (delkj .GE. 0.) THEN
              abs44d = delkjd
              abs44 = delkj
            ELSE
              abs44d = -delkjd
              abs44 = -delkj
            END IF
            x6d = abs33d + abs44d
            x6 = abs33 + abs44
            IF (x6 .LT. eps) THEN
              max6 = eps
              max6d = 0.0_8
            ELSE
              max6d = x6d
              max6 = x6
            END IF
            delkd = ((abs8d*delki+abs8*delkid+abs20d*delkj+abs20*delkjd)
     +        *max6-(abs8*delki+abs20*delkj)*max6d)/max6**2
            delk = (abs8*delki+abs20*delkj)/max6
C
            del2d = delid + deljd + delkd
            del2 = deli + delj + delk
C
            delid = wti1*dfaceid(2, j, k, 1, 4) + wti2*dfaceid(2, j, k, 
     +        2, 4)
            deli = wti1*dfacei(2, j, k, 1, 4) + wti2*dfacei(2, j, k, 2, 
     +        4)
            deljd = wtj1*dfacejd(2, i, k, 1, 4) + wtj2*dfacejd(2, i, k, 
     +        2, 4)
            delj = wtj1*dfacej(2, i, k, 1, 4) + wtj2*dfacej(2, i, k, 2, 
     +        4)
            delkd = wtk1*dfacekd(2, i, j, 1, 4) + wtk2*dfacekd(2, i, j, 
     +        2, 4)
            delk = wtk1*dfacek(2, i, j, 1, 4) + wtk2*dfacek(2, i, j, 2, 
     +        4)
C
            xyzd(2, i, j, k) = del1d + del2d + delid + deljd + delkd
            xyz(2, i, j, k) = xyz0(2, i, j, k) + del1 + del2 + deli + 
     +        delj + delk
C
C              ... and for Z perturbations:
C
            delid = wti1*dfaceid(3, j, k, 1, 1) + wti2*dfaceid(3, j, k, 
     +        2, 1)
            deli = wti1*dfacei(3, j, k, 1, 1) + wti2*dfacei(3, j, k, 2, 
     +        1)
            deljd = wtj1*dfacejd(3, i, k, 1, 1) + wtj2*dfacejd(3, i, k, 
     +        2, 1)
            delj = wtj1*dfacej(3, i, k, 1, 1) + wtj2*dfacej(3, i, k, 2, 
     +        1)
            delkd = wtk1*dfacekd(3, i, j, 1, 1) + wtk2*dfacekd(3, i, j, 
     +        2, 1)
            delk = wtk1*dfacek(3, i, j, 1, 1) + wtk2*dfacek(3, i, j, 2, 
     +        1)
            IF (deli .GE. 0.) THEN
              abs9d = delid
              abs9 = deli
            ELSE
              abs9d = -delid
              abs9 = -deli
            END IF
            IF (delj .GE. 0.) THEN
              abs21d = deljd
              abs21 = delj
            ELSE
              abs21d = -deljd
              abs21 = -delj
            END IF
            IF (delk .GE. 0.) THEN
              abs27d = delkd
              abs27 = delk
            ELSE
              abs27d = -delkd
              abs27 = -delk
            END IF
            IF (deli .GE. 0.) THEN
              abs45d = delid
              abs45 = deli
            ELSE
              abs45d = -delid
              abs45 = -deli
            END IF
            IF (delj .GE. 0.) THEN
              abs51d = deljd
              abs51 = delj
            ELSE
              abs51d = -deljd
              abs51 = -delj
            END IF
            IF (delk .GE. 0.) THEN
              abs54d = delkd
              abs54 = delk
            ELSE
              abs54d = -delkd
              abs54 = -delk
            END IF
            x12d = abs45d + abs51d + abs54d
            x12 = abs45 + abs51 + abs54
            IF (x12 .LT. eps) THEN
              max12 = eps
              max12d = 0.0_8
            ELSE
              max12d = x12d
              max12 = x12
            END IF
C
            del1d = ((abs9d*deli+abs9*delid+abs21d*delj+abs21*deljd+
     +        abs27d*delk+abs27*delkd)*max12-(abs9*deli+abs21*delj+abs27
     +        *delk)*max12d)/max12**2
            del1 = (abs9*deli+abs21*delj+abs27*delk)/max12
C
            delijd = wtj1*dfacejd(3, i, k, 1, 2) + wtj2*dfacejd(3, i, k
     +        , 2, 2)
            delij = wtj1*dfacej(3, i, k, 1, 2) + wtj2*dfacej(3, i, k, 2
     +        , 2)
            delikd = wtk1*dfacekd(3, i, j, 1, 2) + wtk2*dfacekd(3, i, j
     +        , 2, 2)
            delik = wtk1*dfacek(3, i, j, 1, 2) + wtk2*dfacek(3, i, j, 2
     +        , 2)
            IF (delij .GE. 0.) THEN
              abs10d = delijd
              abs10 = delij
            ELSE
              abs10d = -delijd
              abs10 = -delij
            END IF
            IF (delik .GE. 0.) THEN
              abs22d = delikd
              abs22 = delik
            ELSE
              abs22d = -delikd
              abs22 = -delik
            END IF
            IF (delij .GE. 0.) THEN
              abs34d = delijd
              abs34 = delij
            ELSE
              abs34d = -delijd
              abs34 = -delij
            END IF
            IF (delik .GE. 0.) THEN
              abs46d = delikd
              abs46 = delik
            ELSE
              abs46d = -delikd
              abs46 = -delik
            END IF
            x7d = abs34d + abs46d
            x7 = abs34 + abs46
            IF (x7 .LT. eps) THEN
              max7 = eps
              max7d = 0.0_8
            ELSE
              max7d = x7d
              max7 = x7
            END IF
            delid = ((abs10d*delij+abs10*delijd+abs22d*delik+abs22*
     +        delikd)*max7-(abs10*delij+abs22*delik)*max7d)/max7**2
            deli = (abs10*delij+abs22*delik)/max7
C
            deljid = wti1*dfaceid(3, j, k, 1, 2) + wti2*dfaceid(3, j, k
     +        , 2, 2)
            delji = wti1*dfacei(3, j, k, 1, 2) + wti2*dfacei(3, j, k, 2
     +        , 2)
            deljkd = wtk1*dfacekd(3, i, j, 1, 3) + wtk2*dfacekd(3, i, j
     +        , 2, 3)
            deljk = wtk1*dfacek(3, i, j, 1, 3) + wtk2*dfacek(3, i, j, 2
     +        , 3)
            IF (delji .GE. 0.) THEN
              abs11d = deljid
              abs11 = delji
            ELSE
              abs11d = -deljid
              abs11 = -delji
            END IF
            IF (deljk .GE. 0.) THEN
              abs23d = deljkd
              abs23 = deljk
            ELSE
              abs23d = -deljkd
              abs23 = -deljk
            END IF
            IF (delji .GE. 0.) THEN
              abs35d = deljid
              abs35 = delji
            ELSE
              abs35d = -deljid
              abs35 = -delji
            END IF
            IF (deljk .GE. 0.) THEN
              abs47d = deljkd
              abs47 = deljk
            ELSE
              abs47d = -deljkd
              abs47 = -deljk
            END IF
            x8d = abs35d + abs47d
            x8 = abs35 + abs47
            IF (x8 .LT. eps) THEN
              max8 = eps
              max8d = 0.0_8
            ELSE
              max8d = x8d
              max8 = x8
            END IF
            deljd = ((abs11d*delji+abs11*deljid+abs23d*deljk+abs23*
     +        deljkd)*max8-(abs11*delji+abs23*deljk)*max8d)/max8**2
            delj = (abs11*delji+abs23*deljk)/max8
C
            delkid = wti1*dfaceid(3, j, k, 1, 3) + wti2*dfaceid(3, j, k
     +        , 2, 3)
            delki = wti1*dfacei(3, j, k, 1, 3) + wti2*dfacei(3, j, k, 2
     +        , 3)
            delkjd = wtj1*dfacejd(3, i, k, 1, 3) + wtj2*dfacejd(3, i, k
     +        , 2, 3)
            delkj = wtj1*dfacej(3, i, k, 1, 3) + wtj2*dfacej(3, i, k, 2
     +        , 3)
            IF (delki .GE. 0.) THEN
              abs12d = delkid
              abs12 = delki
            ELSE
              abs12d = -delkid
              abs12 = -delki
            END IF
            IF (delkj .GE. 0.) THEN
              abs24d = delkjd
              abs24 = delkj
            ELSE
              abs24d = -delkjd
              abs24 = -delkj
            END IF
            IF (delki .GE. 0.) THEN
              abs36d = delkid
              abs36 = delki
            ELSE
              abs36d = -delkid
              abs36 = -delki
            END IF
            IF (delkj .GE. 0.) THEN
              abs48d = delkjd
              abs48 = delkj
            ELSE
              abs48d = -delkjd
              abs48 = -delkj
            END IF
            x9d = abs36d + abs48d
            x9 = abs36 + abs48
            IF (x9 .LT. eps) THEN
              max9 = eps
              max9d = 0.0_8
            ELSE
              max9d = x9d
              max9 = x9
            END IF
            delkd = ((abs12d*delki+abs12*delkid+abs24d*delkj+abs24*
     +        delkjd)*max9-(abs12*delki+abs24*delkj)*max9d)/max9**2
            delk = (abs12*delki+abs24*delkj)/max9
C
            del2d = delid + deljd + delkd
            del2 = deli + delj + delk
C
            delid = wti1*dfaceid(3, j, k, 1, 4) + wti2*dfaceid(3, j, k, 
     +        2, 4)
            deli = wti1*dfacei(3, j, k, 1, 4) + wti2*dfacei(3, j, k, 2, 
     +        4)
            deljd = wtj1*dfacejd(3, i, k, 1, 4) + wtj2*dfacejd(3, i, k, 
     +        2, 4)
            delj = wtj1*dfacej(3, i, k, 1, 4) + wtj2*dfacej(3, i, k, 2, 
     +        4)
            delkd = wtk1*dfacekd(3, i, j, 1, 4) + wtk2*dfacekd(3, i, j, 
     +        2, 4)
            delk = wtk1*dfacek(3, i, j, 1, 4) + wtk2*dfacek(3, i, j, 2, 
     +        4)
C
            xyzd(3, i, j, k) = del1d + del2d + delid + deljd + delkd
            xyz(3, i, j, k) = xyz0(3, i, j, k) + del1 + del2 + deli + 
     +        delj + delk
          ENDDO
        ENDDO
      ENDDO
      END
