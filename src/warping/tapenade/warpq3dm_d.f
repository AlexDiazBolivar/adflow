C        Generated by TAPENADE     (INRIA, Tropics team)
C  Tapenade 2.2.4 (r2308) - 03/04/2008 10:03
C  
C  Differentiation of warpq3dm in forward (tangent) mode:
C   variations  of output variables: dfacei dfacej dfacek xyz
C   with respect to input variables: dfacei dfacej dfacek xyz
C
      SUBROUTINE WARPQ3DM_D(il, jl, kl, i1, i2, j1, j2, k1, k2, xyz0, s0
     +                      , dfacei, dfaceid, dfacej, dfacejd, dfacek, 
     +                      dfacekd, xyz, xyzd)
      IMPLICIT NONE
C
C
C
C     ******************************************************************
C     *   WARPQ3DM perturbs the interior of one face of one block of a *
C     *   multiblock grid structure given perturbed edges of that face,*
C     *   which is indicated by one pair of equal index arguments.     *
C     *   (E.g.: I2 = I1 means a face in the J/K subspace.)            *
C     *                                                                *
C     *   The two-stage algorithm uses an intermediate perturbation to *
C     *   account for any corner motion, involving edges derived from  *
C     *   the original edges, then a second perturbation to account    *
C     *   for any differences between the intermediate edges and the   *
C     *   specified new edges.                                         *
C     *                                                                *
C     *   The perturbed edges should be input as edges of the desired  *
C     *   output face.  The original relative arc-length increments in *
C     *   each index direction should also be input.  See PARAM3DM for *
C     *   setting them up in preparation for multiple perturbations.   *
C     *                                                                *
C     *   11/29/95  D.Saunders  Adaptation of WARPQ3D for specialized  *
C     *                         WARP-BLK used by FLO107-MB.            *
C     *   04/04/96      "       DELQ3DM does stage 1 only now (all     *
C     *                         that WARP-BLK needs).                  *
C     *                                                                *
C     *   David Saunders/James Reuther, NASA Ames Research Center, CA. *
C     ******************************************************************
C
C Take out when all compilers have a switch
C
C     Arguments.
C
C I  Grid array dimensions.
      INTEGER il, jl, kl
C I  Define active face,
C    one pair being equal.
      INTEGER i1, i2, j1, j2, k1, k2
      REAL*8 xyz0
C I  Base face coordinates in
C    appropriate places
      DIMENSION xyz0(3, 0:il+1, 0:jl+1, 0:kl+1)
      REAL*8 s0
C I  Base normalized arc-lengths
      DIMENSION s0(3, 0:il+1, 0:jl+1, 0:kl+1)
      REAL*8 dfacei
C S  For face perturbations; e.g.,
      DIMENSION dfacei(3, jl, kl)
      REAL*8 dfaceid
      DIMENSION dfaceid(3, jl, kl)
      REAL*8 dfacej
C    DFACEI(1:3,1:JL,1:KL) =
      DIMENSION dfacej(3, il, kl)
      REAL*8 dfacejd
      DIMENSION dfacejd(3, il, kl)
      REAL*8 dfacek
C    dX, dY, dZ for an I face, etc.
      DIMENSION dfacek(3, il, jl)
      REAL*8 dfacekd
      DIMENSION dfacekd(3, il, jl)
      REAL*8 xyz
CI/O Grid coordinates: new edges
C    of a face in; full new face
C    out
      DIMENSION xyz(3, 0:il+1, 0:jl+1, 0:kl+1)
      REAL*8 xyzd
      DIMENSION xyzd(3, 0:il+1, 0:jl+1, 0:kl+1)
      REAL*8 one
      PARAMETER (one=1.e+0)
C
C     Local variables.
C
      INTEGER i, j, k
      REAL*8 wtj2
      REAL*8 wtj1
      REAL*8 wtk2
      REAL*8 wtk1
      REAL*8 delj
      REAL*8 deljd
      REAL*8 delk
      REAL*8 delkd
      REAL*8 wti2
      REAL*8 wti1
      REAL*8 deli
      REAL*8 delid
C
C
C     Execution.
C     ----------
C
C     Stage 1:
C     Handle any corner motion by generating an intermediate face with
C     the final corners but otherwise derived from the original edges.
C     Actually, just set up the appropriate face perturbations.
C
      CALL DELQ3DM_D(il, jl, kl, i1, i2, j1, j2, k1, k2, xyz0, s0, 
     +               dfacei, dfaceid, dfacej, dfacejd, dfacek, dfacekd, 
     +               xyz, xyzd)
C
C
C     Stage 2:
C     Set up the perturbations from the intermediate edges to the final
C     edges, then interpolate them into the interior points.
C
      IF (i1 .EQ. i2) THEN
C I plane case:
C
        i = i1
C
C        J = 1 and JL edge perturbations:
C
        DO k=2,kl-1
          dfaceid(1, 1, k) = xyzd(1, i, 1, k) - dfaceid(1, 1, k)
          dfacei(1, 1, k) = xyz(1, i, 1, k) - xyz0(1, i, 1, k) - dfacei(
     +      1, 1, k)
          dfaceid(2, 1, k) = xyzd(2, i, 1, k) - dfaceid(2, 1, k)
          dfacei(2, 1, k) = xyz(2, i, 1, k) - xyz0(2, i, 1, k) - dfacei(
     +      2, 1, k)
          dfaceid(3, 1, k) = xyzd(3, i, 1, k) - dfaceid(3, 1, k)
          dfacei(3, 1, k) = xyz(3, i, 1, k) - xyz0(3, i, 1, k) - dfacei(
     +      3, 1, k)
          dfaceid(1, jl, k) = xyzd(1, i, jl, k) - dfaceid(1, jl, k)
          dfacei(1, jl, k) = xyz(1, i, jl, k) - xyz0(1, i, jl, k) - 
     +      dfacei(1, jl, k)
          dfaceid(2, jl, k) = xyzd(2, i, jl, k) - dfaceid(2, jl, k)
          dfacei(2, jl, k) = xyz(2, i, jl, k) - xyz0(2, i, jl, k) - 
     +      dfacei(2, jl, k)
          dfaceid(3, jl, k) = xyzd(3, i, jl, k) - dfaceid(3, jl, k)
          dfacei(3, jl, k) = xyz(3, i, jl, k) - xyz0(3, i, jl, k) - 
     +      dfacei(3, jl, k)
        ENDDO
C
C        K = 1 and KL edge perturbations:
C
        DO j=2,jl-1
          dfaceid(1, j, 1) = xyzd(1, i, j, 1) - dfaceid(1, j, 1)
          dfacei(1, j, 1) = xyz(1, i, j, 1) - xyz0(1, i, j, 1) - dfacei(
     +      1, j, 1)
          dfaceid(2, j, 1) = xyzd(2, i, j, 1) - dfaceid(2, j, 1)
          dfacei(2, j, 1) = xyz(2, i, j, 1) - xyz0(2, i, j, 1) - dfacei(
     +      2, j, 1)
          dfaceid(3, j, 1) = xyzd(3, i, j, 1) - dfaceid(3, j, 1)
          dfacei(3, j, 1) = xyz(3, i, j, 1) - xyz0(3, i, j, 1) - dfacei(
     +      3, j, 1)
          dfaceid(1, j, kl) = xyzd(1, i, j, kl) - dfaceid(1, j, kl)
          dfacei(1, j, kl) = xyz(1, i, j, kl) - xyz0(1, i, j, kl) - 
     +      dfacei(1, j, kl)
          dfaceid(2, j, kl) = xyzd(2, i, j, kl) - dfaceid(2, j, kl)
          dfacei(2, j, kl) = xyz(2, i, j, kl) - xyz0(2, i, j, kl) - 
     +      dfacei(2, j, kl)
          dfaceid(3, j, kl) = xyzd(3, i, j, kl) - dfaceid(3, j, kl)
          dfacei(3, j, kl) = xyz(3, i, j, kl) - xyz0(3, i, j, kl) - 
     +      dfacei(3, j, kl)
        ENDDO
C
C        Interior points: accumulate the (independent) contributions.
C
        DO k=2,kl-1
          DO j=2,jl-1
            wtj2 = s0(2, i, j, k)
            wtj1 = one - wtj2
            wtk2 = s0(3, i, j, k)
            wtk1 = one - wtk2
C
            deljd = wtj1*dfaceid(1, 1, k) + wtj2*dfaceid(1, jl, k)
            delj = wtj1*dfacei(1, 1, k) + wtj2*dfacei(1, jl, k)
            delkd = wtk1*dfaceid(1, j, 1) + wtk2*dfaceid(1, j, kl)
            delk = wtk1*dfacei(1, j, 1) + wtk2*dfacei(1, j, kl)
C
            xyzd(1, i, j, k) = dfaceid(1, j, k) + deljd + delkd
            xyz(1, i, j, k) = xyz0(1, i, j, k) + dfacei(1, j, k) + delj 
     +        + delk
C
            deljd = wtj1*dfaceid(2, 1, k) + wtj2*dfaceid(2, jl, k)
            delj = wtj1*dfacei(2, 1, k) + wtj2*dfacei(2, jl, k)
            delkd = wtk1*dfaceid(2, j, 1) + wtk2*dfaceid(2, j, kl)
            delk = wtk1*dfacei(2, j, 1) + wtk2*dfacei(2, j, kl)
C
            xyzd(2, i, j, k) = dfaceid(2, j, k) + deljd + delkd
            xyz(2, i, j, k) = xyz0(2, i, j, k) + dfacei(2, j, k) + delj 
     +        + delk
C
            deljd = wtj1*dfaceid(3, 1, k) + wtj2*dfaceid(3, jl, k)
            delj = wtj1*dfacei(3, 1, k) + wtj2*dfacei(3, jl, k)
            delkd = wtk1*dfaceid(3, j, 1) + wtk2*dfaceid(3, j, kl)
            delk = wtk1*dfacei(3, j, 1) + wtk2*dfacei(3, j, kl)
C
            xyzd(3, i, j, k) = dfaceid(3, j, k) + deljd + delkd
            xyz(3, i, j, k) = xyz0(3, i, j, k) + dfacei(3, j, k) + delj 
     +        + delk
          ENDDO
        ENDDO
      ELSE IF (j1 .EQ. j2) THEN
C
C J plane case:
C
        j = j1
C
C        I = 1 and IL edge perturbations:
C
        DO k=2,kl-1
          dfacejd(1, 1, k) = xyzd(1, 1, j, k) - dfacejd(1, 1, k)
          dfacej(1, 1, k) = xyz(1, 1, j, k) - xyz0(1, 1, j, k) - dfacej(
     +      1, 1, k)
          dfacejd(2, 1, k) = xyzd(2, 1, j, k) - dfacejd(2, 1, k)
          dfacej(2, 1, k) = xyz(2, 1, j, k) - xyz0(2, 1, j, k) - dfacej(
     +      2, 1, k)
          dfacejd(3, 1, k) = xyzd(3, 1, j, k) - dfacejd(3, 1, k)
          dfacej(3, 1, k) = xyz(3, 1, j, k) - xyz0(3, 1, j, k) - dfacej(
     +      3, 1, k)
          dfacejd(1, il, k) = xyzd(1, il, j, k) - dfacejd(1, il, k)
          dfacej(1, il, k) = xyz(1, il, j, k) - xyz0(1, il, j, k) - 
     +      dfacej(1, il, k)
          dfacejd(2, il, k) = xyzd(2, il, j, k) - dfacejd(2, il, k)
          dfacej(2, il, k) = xyz(2, il, j, k) - xyz0(2, il, j, k) - 
     +      dfacej(2, il, k)
          dfacejd(3, il, k) = xyzd(3, il, j, k) - dfacejd(3, il, k)
          dfacej(3, il, k) = xyz(3, il, j, k) - xyz0(3, il, j, k) - 
     +      dfacej(3, il, k)
        ENDDO
C
C        K = 1 and KL edge perturbations:
C
        DO i=2,il-1
          dfacejd(1, i, 1) = xyzd(1, i, j, 1) - dfacejd(1, i, 1)
          dfacej(1, i, 1) = xyz(1, i, j, 1) - xyz0(1, i, j, 1) - dfacej(
     +      1, i, 1)
          dfacejd(2, i, 1) = xyzd(2, i, j, 1) - dfacejd(2, i, 1)
          dfacej(2, i, 1) = xyz(2, i, j, 1) - xyz0(2, i, j, 1) - dfacej(
     +      2, i, 1)
          dfacejd(3, i, 1) = xyzd(3, i, j, 1) - dfacejd(3, i, 1)
          dfacej(3, i, 1) = xyz(3, i, j, 1) - xyz0(3, i, j, 1) - dfacej(
     +      3, i, 1)
          dfacejd(1, i, kl) = xyzd(1, i, j, kl) - dfacejd(1, i, kl)
          dfacej(1, i, kl) = xyz(1, i, j, kl) - xyz0(1, i, j, kl) - 
     +      dfacej(1, i, kl)
          dfacejd(2, i, kl) = xyzd(2, i, j, kl) - dfacejd(2, i, kl)
          dfacej(2, i, kl) = xyz(2, i, j, kl) - xyz0(2, i, j, kl) - 
     +      dfacej(2, i, kl)
          dfacejd(3, i, kl) = xyzd(3, i, j, kl) - dfacejd(3, i, kl)
          dfacej(3, i, kl) = xyz(3, i, j, kl) - xyz0(3, i, j, kl) - 
     +      dfacej(3, i, kl)
        ENDDO
C
C        Interior points: accumulate the (independent) contributions.
C
        DO k=2,kl-1
          DO i=2,il-1
            wti2 = s0(1, i, j, k)
            wti1 = one - wti2
            wtk2 = s0(3, i, j, k)
            wtk1 = one - wtk2
C
            delid = wti1*dfacejd(1, 1, k) + wti2*dfacejd(1, il, k)
            deli = wti1*dfacej(1, 1, k) + wti2*dfacej(1, il, k)
            delkd = wtk1*dfacejd(1, i, 1) + wtk2*dfacejd(1, i, kl)
            delk = wtk1*dfacej(1, i, 1) + wtk2*dfacej(1, i, kl)
C
            xyzd(1, i, j, k) = dfacejd(1, i, k) + delid + delkd
            xyz(1, i, j, k) = xyz0(1, i, j, k) + dfacej(1, i, k) + deli 
     +        + delk
C
            delid = wti1*dfacejd(2, 1, k) + wti2*dfacejd(2, il, k)
            deli = wti1*dfacej(2, 1, k) + wti2*dfacej(2, il, k)
            delkd = wtk1*dfacejd(2, i, 1) + wtk2*dfacejd(2, i, kl)
            delk = wtk1*dfacej(2, i, 1) + wtk2*dfacej(2, i, kl)
C
            xyzd(2, i, j, k) = dfacejd(2, i, k) + delid + delkd
            xyz(2, i, j, k) = xyz0(2, i, j, k) + dfacej(2, i, k) + deli 
     +        + delk
C
            delid = wti1*dfacejd(3, 1, k) + wti2*dfacejd(3, il, k)
            deli = wti1*dfacej(3, 1, k) + wti2*dfacej(3, il, k)
            delkd = wtk1*dfacejd(3, i, 1) + wtk2*dfacejd(3, i, kl)
            delk = wtk1*dfacej(3, i, 1) + wtk2*dfacej(3, i, kl)
C
            xyzd(3, i, j, k) = dfacejd(3, i, k) + delid + delkd
            xyz(3, i, j, k) = xyz0(3, i, j, k) + dfacej(3, i, k) + deli 
     +        + delk
          ENDDO
        ENDDO
      ELSE IF (k1 .EQ. k2) THEN
C
C K plane case:
C
        k = k1
C
C        I = 1 and IL edge perturbations:
C
        DO j=2,jl-1
          dfacekd(1, 1, j) = xyzd(1, 1, j, k) - dfacekd(1, 1, j)
          dfacek(1, 1, j) = xyz(1, 1, j, k) - xyz0(1, 1, j, k) - dfacek(
     +      1, 1, j)
          dfacekd(2, 1, j) = xyzd(2, 1, j, k) - dfacekd(2, 1, j)
          dfacek(2, 1, j) = xyz(2, 1, j, k) - xyz0(2, 1, j, k) - dfacek(
     +      2, 1, j)
          dfacekd(3, 1, j) = xyzd(3, 1, j, k) - dfacekd(3, 1, j)
          dfacek(3, 1, j) = xyz(3, 1, j, k) - xyz0(3, 1, j, k) - dfacek(
     +      3, 1, j)
          dfacekd(1, il, j) = xyzd(1, il, j, k) - dfacekd(1, il, j)
          dfacek(1, il, j) = xyz(1, il, j, k) - xyz0(1, il, j, k) - 
     +      dfacek(1, il, j)
          dfacekd(2, il, j) = xyzd(2, il, j, k) - dfacekd(2, il, j)
          dfacek(2, il, j) = xyz(2, il, j, k) - xyz0(2, il, j, k) - 
     +      dfacek(2, il, j)
          dfacekd(3, il, j) = xyzd(3, il, j, k) - dfacekd(3, il, j)
          dfacek(3, il, j) = xyz(3, il, j, k) - xyz0(3, il, j, k) - 
     +      dfacek(3, il, j)
        ENDDO
C
C        J = 1 and JL edge perturbations:
C
        DO i=2,il-1
          dfacekd(1, i, 1) = xyzd(1, i, 1, k) - dfacekd(1, i, 1)
          dfacek(1, i, 1) = xyz(1, i, 1, k) - xyz0(1, i, 1, k) - dfacek(
     +      1, i, 1)
          dfacekd(2, i, 1) = xyzd(2, i, 1, k) - dfacekd(2, i, 1)
          dfacek(2, i, 1) = xyz(2, i, 1, k) - xyz0(2, i, 1, k) - dfacek(
     +      2, i, 1)
          dfacekd(3, i, 1) = xyzd(3, i, 1, k) - dfacekd(3, i, 1)
          dfacek(3, i, 1) = xyz(3, i, 1, k) - xyz0(3, i, 1, k) - dfacek(
     +      3, i, 1)
          dfacekd(1, i, jl) = xyzd(1, i, jl, k) - dfacekd(1, i, jl)
          dfacek(1, i, jl) = xyz(1, i, jl, k) - xyz0(1, i, jl, k) - 
     +      dfacek(1, i, jl)
          dfacekd(2, i, jl) = xyzd(2, i, jl, k) - dfacekd(2, i, jl)
          dfacek(2, i, jl) = xyz(2, i, jl, k) - xyz0(2, i, jl, k) - 
     +      dfacek(2, i, jl)
          dfacekd(3, i, jl) = xyzd(3, i, jl, k) - dfacekd(3, i, jl)
          dfacek(3, i, jl) = xyz(3, i, jl, k) - xyz0(3, i, jl, k) - 
     +      dfacek(3, i, jl)
        ENDDO
C
C        Interior points: accumulate the (independent) contributions.
C
        DO j=2,jl-1
          DO i=2,il-1
            wti2 = s0(1, i, j, k)
            wti1 = one - wti2
            wtj2 = s0(2, i, j, k)
            wtj1 = one - wtj2
C
            delid = wti1*dfacekd(1, 1, j) + wti2*dfacekd(1, il, j)
            deli = wti1*dfacek(1, 1, j) + wti2*dfacek(1, il, j)
            deljd = wtj1*dfacekd(1, i, 1) + wtj2*dfacekd(1, i, jl)
            delj = wtj1*dfacek(1, i, 1) + wtj2*dfacek(1, i, jl)
C
            xyzd(1, i, j, k) = dfacekd(1, i, j) + delid + deljd
            xyz(1, i, j, k) = xyz0(1, i, j, k) + dfacek(1, i, j) + deli 
     +        + delj
C
            delid = wti1*dfacekd(2, 1, j) + wti2*dfacekd(2, il, j)
            deli = wti1*dfacek(2, 1, j) + wti2*dfacek(2, il, j)
            deljd = wtj1*dfacekd(2, i, 1) + wtj2*dfacekd(2, i, jl)
            delj = wtj1*dfacek(2, i, 1) + wtj2*dfacek(2, i, jl)
C
            xyzd(2, i, j, k) = dfacekd(2, i, j) + delid + deljd
            xyz(2, i, j, k) = xyz0(2, i, j, k) + dfacek(2, i, j) + deli 
     +        + delj
C
            delid = wti1*dfacekd(3, 1, j) + wti2*dfacekd(3, il, j)
            deli = wti1*dfacek(3, 1, j) + wti2*dfacek(3, il, j)
            deljd = wtj1*dfacekd(3, i, 1) + wtj2*dfacekd(3, i, jl)
            delj = wtj1*dfacek(3, i, 1) + wtj2*dfacek(3, i, jl)
C
            xyzd(3, i, j, k) = dfacekd(3, i, j) + delid + deljd
            xyz(3, i, j, k) = xyz0(3, i, j, k) + dfacek(3, i, j) + deli 
     +        + delj
          ENDDO
        ENDDO
      END IF
      END
